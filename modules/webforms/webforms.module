<?php

/**
 * @file
 * Main module file for hooks.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Render\Element;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Url;
use Drupal\Core\Form\FormStateInterface;
use Drupal\field\Entity\FieldConfig;

/**
 * Prepares variables for individual form element templates.
 *
 * Default template: field-multiple-value-form.html.twig.
 *
 * Combines multiple values into a table with drag-n-drop reordering.
 *
 * @param array $variables
 *   An associative array containing:
 *   - element: A render element representing the form element.
 */
function webforms_preprocess_field_multiple_value_form(&$variables) {
  $element = $variables['element'];
  $variables['multiple'] = $element['#cardinality_multiple'];

  if ($variables['multiple']) {
    $table_id = Html::getUniqueId($element['#field_name'] . '_values');
    $order_class = $element['#field_name'] . '-delta-order';
    $header_attributes = new Attribute(array('class' => array('label')));
    if (!empty($element['#required'])) {
      $header_attributes['class'][] = 'js-form-required';
      $header_attributes['class'][] = 'form-required';
    }
    $header = array(
      array(
        'data' => array(
          '#prefix' => '<h4' . $header_attributes . '>',
          'title' => array(
            '#markup' => $element['#title'],
          ),
          '#suffix' => '</h4>',
        ),
        'colspan' => 2,
        'class' => array('field-label'),
      ),
      t('Order', array(), array('context' => 'Sort order')),
    );
    $rows = array();

    // Sort items according to '_weight' (needed when the form comes back after
    // preview or failed validation).
    $items = array();
    $variables['button'] = array();
    foreach (Element::children($element) as $key) {
      if ($key === 'add_more') {
        $variables['button']['add_more'] = &$element[$key];
      }
      elseif ($key === 'prepopulate_locations') {
        $variables['button']['prepopulate_locations'] = &$element[$key];
      }
      elseif ($key === 'remove_items') {
        $variables['button']['remove_items'] = &$element[$key];
      }
      else {
        $items[] = &$element[$key];
      }
    }
    usort($items, '_field_multiple_value_form_sort_helper');

    // Add the items as table rows.
    foreach ($items as $item) {
      $item['_weight']['#attributes']['class'] = array($order_class);

      // Remove weight form element from item render array so it can be rendered
      // in a separate table column.
      $delta_element = $item['_weight'];
      unset($item['_weight']);

      $cells = array(
        array('data' => '', 'class' => array('field-multiple-drag')),
        array('data' => $item),
        array('data' => $delta_element, 'class' => array('delta-order')),
      );
      $rows[] = array(
        'data' => $cells,
        'class' => array('draggable'),
      );
    }

    $variables['table'] = array(
      '#type' => 'table',
      '#header' => $header,
      '#rows' => $rows,
      '#attributes' => array(
        'id' => $table_id,
        'class' => array('field-multiple-table'),
      ),
      '#tabledrag' => array(
        array(
          'action' => 'order',
          'relationship' => 'sibling',
          'group' => $order_class,
        ),
      ),
    );

    if (!empty($element['#description'])) {
      $description_id = $element['#attributes']['aria-describedby'];
      $description_attributes['id'] = $description_id;
      $variables['description']['attributes'] = new Attribute($description_attributes);
      $variables['description']['content'] = $element['#description'];

      // Add the description's id to the table aria attributes.
      $variables['table']['#attributes']['aria-describedby'] = $element['#attributes']['aria-describedby'];
    }
  }
  else {
    $variables['elements'] = array();
    foreach (Element::children($element) as $key) {
      $variables['elements'][] = $element[$key];
    }
  }
}

/**
 * Implements hook_entity_operation().
 */
function webforms_entity_operation(EntityInterface $entity) {
  $operations = array();

  if ($entity->getEntityType()->id() == 'contact_form' && $entity->id() != 'personal') {
    $operations['webforms_export_csv'] = array(
      'title' => t('Submissions CSV export'),
      'weight' => 51,
      'url' => Url::fromRoute('entity.contact_form.export_csv', ['contact_form' => $entity->id()]),
    );
  }

  return $operations;
}

/**
 * Implements hook_entity_type_alter().
 */
function webforms_entity_type_alter(array &$entity_types) {
  // Override contact form.
  $entity_types['contact_form']->setClass('Drupal\webforms\ContactForm');
  $entity_types['contact_form']->setFormClass('add', 'Drupal\webforms\ContactFormEditForm');
  $entity_types['contact_form']->setFormClass('edit', 'Drupal\webforms\ContactFormEditForm');
  $config_export = $entity_types['contact_form']->get('config_export');
  // TODO: Move to ThirdPartySettings.
  $config_export[] = 'prefix';
  $config_export[] = 'suffix';
  $config_export[] = 'provideSubmissionPage';
  $config_export[] = 'submissionPageContent';
  $config_export[] = 'submissionPageTitle';
  $config_export[] = 'email';
  $entity_types['contact_form']->set('config_export', $config_export);
  // Override contact message.
  $entity_types['contact_message']->setFormClass('default', 'Drupal\webforms\MessageForm');
}

/**
 * Implements hook_validation_constraint_alter().
 */
function webforms_validation_constraint_alter(array &$definitions) {
  // Use Symfony's email validator to prevent 'test@test' to be a valid address.
  $definitions['Email']['class'] = 'Symfony\Component\Validator\Constraints\Email';
}

/**
 * Implements hook_theme().
 */
function webforms_theme($existing, $type, $theme, $path) {
  return [
    'webform_submission_page' => [
      'variables' => [
        'content' => '',
        'title' => '',
      ],
      'template' => 'submission-page',
    ],
  ];
}

/**
 * Implements hook_mail_alter().
 */
function webforms_mail_alter(&$message) {
  // Alter only contact form messages.
  if (!in_array($message['id'], ['contact_page_mail', 'contact_page_copy'])) {
    return;
  }
  // No form provided.
  if (empty($message['params']['contact_form'])) {
    return;
  }

  // Retrieve email settings.
  $contact_form = $message['params']['contact_form'];
  $email_settings = $contact_form->getEmailSettings();

  // Do not alter emails if it is not asked.
  if (!$email_settings['custom']) {
    return;
  }

  // Not a copy to sender.
  if ($message['id'] == 'contact_page_mail') {
    $content = $email_settings['content'];

    // Replace tokens.
    $token_data = [
      'contact_message' => $message['params']['contact_message'],
    ];

    $content['value'] = \Drupal::token()->replace($content['value'], $token_data);
    $subject = \Drupal::token()->replace($email_settings['subject'], $token_data);

    $message['subject'] = $subject;
    $message['body'] = [
      check_markup($content['value'], $content['format']),
    ];
    $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
  }
}

/**
 * Implements hook_form_alter().
 */
function webforms_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_name = strstr($form_id, 'contact_message_')) {
    $form_name = preg_replace('/contact_message_/', '', $form_name);
    $bundle = preg_replace('/_form/', '', $form_name);
    foreach ($form as $key => $children) {
      // Acceptance criteria for applying field's label to checkbox widget:
      // 1) Field widget type is 'checkbox'.
      // 2) Field type is 'boolean'.
      if (strstr($key, 'field_') && isset($form[$key]['widget']['value']['#type']) && $form[$key]['widget']['value']['#type'] == 'checkbox') {
        $field_config = FieldConfig::loadByName('contact_message', $bundle, $key);
        if ($field_config->getType() == 'boolean') {
          $form[$key]['#prefix'] = '<div class="checkbox-custom-label control-label text">' . $field_config->getLabel() . '</div>';
        }
      }
    }
  }
}

/**
 * Implements hook_entity_embed_display_plugins_for_context_alter().
 */
function webforms_entity_embed_display_plugins_for_context_alter($definitions_for_context, $contexts) {
  if (isset($definitions_for_context['entity_reference:entity_reference_entity_view'])) {
    $definitions_for_context['entity_reference:entity_reference_entity_view']['class'] = 'Drupal\webforms\Plugin\entity_embed\EntityEmbedDisplay\EntityReferenceFieldFormatter';
  }
}

/**
 * Implements hook_ENTITY_TYPE_embed_alter().
 */
function webforms_contact_form_embed_alter(&$build, $entity, $context) {
  foreach ($context['data-entity-embed-settings'] as $field_name => $default_value) {
    if (!empty($build[$field_name]['widget'][0]['option_emails']) && $default_value != -1) {
      $build[$field_name]['widget'][0]['option_emails']['#default_value'] = $default_value;
      $build[$field_name]['widget'][0]['option_emails']['#value'] = $default_value;
      $build[$field_name]['#attributes']['class'][] = 'hidden';
    }
  }
}
